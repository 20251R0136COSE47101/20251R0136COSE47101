# -*- coding: utf-8 -*-
"""Resnet-18

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14ZAAGNMZBdfkDars2-3xNew2Dxisq8OQ
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_planes, planes, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != self.expansion*planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion*planes, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion*planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, in_planes, planes, stride=1):
        super(Bottleneck, self).__init__()
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3,
                               stride=stride, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, self.expansion *
                               planes, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(self.expansion*planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != self.expansion*planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion*planes,
                          kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion*planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = F.relu(self.bn2(self.conv2(out)))
        out = self.bn3(self.conv3(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class ResNet(nn.Module):
    def __init__(self, block, num_blocks, in_channels = 3, out_channels = None):
        super(ResNet, self).__init__()
        self.in_planes = 64
        self.out_channels = out_channels

        self.conv1 = nn.Conv2d(in_channels, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)

        if self.out_channels and self.out_channels != 512 * block.expansion:
            self.adjust_channels_conv = nn.Conv2d(512 * block.expansion, self.out_channels, kernel_size=1, stride=1, padding=0, bias=False)
            self.adjust_channels_bn = nn.BatchNorm2d(self.out_channels)
        else:
            self.adjust_channels_conv = None

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1]*(num_blocks-1)
        layers = []
        for stride_value in strides:
            layers.append(block(self.in_planes, planes, stride_value))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x):

        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)

        out = F.adaptive_avg_pool2d(out, (14, 14))

        if self.adjust_channels_conv is not None:
          out = F.relu(self.adjust_channels_bn(self.adjust_channels_conv(out)))

        return out

    def ResNet18_Vertical_Features():
      #Input: (B, 3, 224, 224)
      #Output: (B, 512, 14, 14)
      model = ResNet(BasicBlock, [2, 2, 2, 2], in_channels=3)
      return model

    def ResNet18_FPF_Features():
      #Input: (B, 1, 512, 196)
      #Output: (B, 196, 14, 14)
      model = ResNet(BasicBlock, [2, 2, 2, 2], in_channels=1, out_channels = 196)
      return model

    def ResNet18():
      return ResNet(BasicBlock, [2, 2, 2, 2])


    def ResNet34():
      return ResNet(BasicBlock, [3, 4, 6, 3])


    def ResNet50():
      return ResNet(Bottleneck, [3, 4, 6, 3])


    def ResNet101():
      return ResNet(Bottleneck, [3, 4, 23, 3])


    def ResNet152():
      return ResNet(Bottleneck, [3, 8, 36, 3])

print("--- Vertical Features Test ---")
vertical_model = ResNet.ResNet18_Vertical_Features()
dummy_vertical_input = torch.randn(1, 3, 224, 224) # 데이터 1개
print(f"Dummy Vertical Input Shape: {dummy_vertical_input.shape}")
vertical_output = vertical_model(dummy_vertical_input)
print(f"Vertical Output Shape: {vertical_output.shape}") # torch.Size([1, 512, 14, 14])

print("\n""\n")

print("--- FPF Features Test ---")
fpf_model = ResNet.ResNet18_FPF_Features()
dummy_fpf_input_2d = torch.randn(1, 1, 512, 196) # 데이터 1개
print(f"Dummy FPF Input Shape: {dummy_fpf_input_2d.shape}")
fpf_output = fpf_model(dummy_fpf_input_2d)
print(f"FPF Output Shape: {fpf_output.shape}") # torch.Size([1, 196, 14, 14])